{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "97208b5f",
   "metadata": {},
   "source": [
    "<b>Import</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "541efd38",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b7583158",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_crop=pd.read_excel(\"C:/Users/karthika/Downloads/train.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f91ce86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>silt</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  Insects  Crop  Soil  Category_of_Toxicant  Does_count  \\\n",
       "0  1.0    188.0  Feed  clay                   1.0         0.0   \n",
       "1  2.0    209.0  Feed  clay                   1.0         0.0   \n",
       "2  3.0    257.0  Feed  clay                   1.0         0.0   \n",
       "3  4.0    257.0  Feed  silt                   1.0         0.0   \n",
       "4  5.0    342.0  Feed  clay                   1.0         0.0   \n",
       "\n",
       "   Number_of_Weeks_Used  Number_Weeks_does_not used  Season  Crop_status  \n",
       "0                   0.0                         0.0     1.0          0.0  \n",
       "1                   0.0                         0.0     2.0          1.0  \n",
       "2                   0.0                         0.0     2.0          1.0  \n",
       "3                   0.0                         0.0     2.0          1.0  \n",
       "4                   0.0                         0.0     2.0          1.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_crop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "80f79084",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_crop=pd.read_excel(\"C:/Users/karthika/Downloads/test.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c07d49ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>silt</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>410.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>silt</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>626.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>731.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>789.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  Insects  Crop  Soil  Category_of_Toxicant  Does_count  \\\n",
       "0  1.0    188.0  Feed  silt                   1.0         0.0   \n",
       "1  2.0    410.0  Feed  silt                   1.0         0.0   \n",
       "2  3.0    626.0  Feed  clay                   1.0         0.0   \n",
       "3  4.0    731.0  Feed  clay                   1.0         0.0   \n",
       "4  5.0    789.0  Food  clay                   1.0         0.0   \n",
       "\n",
       "   Number_of_Weeks_Used  Number_Weeks_does_not used  Season  \n",
       "0                   NaN                         0.0     2.0  \n",
       "1                   0.0                         0.0     2.0  \n",
       "2                   0.0                         0.0     2.0  \n",
       "3                   0.0                         0.0     2.0  \n",
       "4                   0.0                         0.0     1.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_crop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00e59f9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data=pd.concat([train_crop,test_crop], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f3afae5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>silt</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>Feed</td>\n",
       "      <td>clay</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  Insects  Crop  Soil  Category_of_Toxicant  Does_count  \\\n",
       "0  1.0    188.0  Feed  clay                   1.0         0.0   \n",
       "1  2.0    209.0  Feed  clay                   1.0         0.0   \n",
       "2  3.0    257.0  Feed  clay                   1.0         0.0   \n",
       "3  4.0    257.0  Feed  silt                   1.0         0.0   \n",
       "4  5.0    342.0  Feed  clay                   1.0         0.0   \n",
       "\n",
       "   Number_of_Weeks_Used  Number_Weeks_does_not used  Season  Crop_status  \n",
       "0                   0.0                         0.0     1.0          0.0  \n",
       "1                   0.0                         0.0     2.0          1.0  \n",
       "2                   0.0                         0.0     2.0          1.0  \n",
       "3                   0.0                         0.0     2.0          1.0  \n",
       "4                   0.0                         0.0     2.0          1.0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb2369cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Crop</th>\n",
       "      <th>Soil</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>114995</th>\n",
       "      <td>34996.0</td>\n",
       "      <td>677.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>silt</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114996</th>\n",
       "      <td>34997.0</td>\n",
       "      <td>731.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>silt</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114997</th>\n",
       "      <td>34998.0</td>\n",
       "      <td>732.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>silt</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114998</th>\n",
       "      <td>34999.0</td>\n",
       "      <td>731.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>silt</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114999</th>\n",
       "      <td>35000.0</td>\n",
       "      <td>731.0</td>\n",
       "      <td>Food</td>\n",
       "      <td>silt</td>\n",
       "      <td>2.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             ID  Insects  Crop  Soil  Category_of_Toxicant  Does_count  \\\n",
       "114995  34996.0    677.0  Food  silt                   2.0        40.0   \n",
       "114996  34997.0    731.0  Food  silt                   2.0        10.0   \n",
       "114997  34998.0    732.0  Food  silt                   2.0        10.0   \n",
       "114998  34999.0    731.0  Food  silt                   2.0        10.0   \n",
       "114999  35000.0    731.0  Food  silt                   2.0        15.0   \n",
       "\n",
       "        Number_of_Weeks_Used  Number_Weeks_does_not used  Season  Crop_status  \n",
       "114995                  27.0                         3.0     1.0          NaN  \n",
       "114996                   8.0                        20.0     3.0          NaN  \n",
       "114997                  10.0                        20.0     2.0          NaN  \n",
       "114998                  31.0                         2.0     2.0          NaN  \n",
       "114999                   8.0                        16.0     1.0          NaN  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fe902c5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>115000.000000</td>\n",
       "      <td>115000.000000</td>\n",
       "      <td>115000.000000</td>\n",
       "      <td>115000.000000</td>\n",
       "      <td>103403.000000</td>\n",
       "      <td>115000.000000</td>\n",
       "      <td>115000.000000</td>\n",
       "      <td>80000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>33152.673913</td>\n",
       "      <td>1398.193104</td>\n",
       "      <td>2.267870</td>\n",
       "      <td>25.855783</td>\n",
       "      <td>28.698316</td>\n",
       "      <td>9.508243</td>\n",
       "      <td>1.898374</td>\n",
       "      <td>0.192312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22567.036282</td>\n",
       "      <td>849.695508</td>\n",
       "      <td>0.464341</td>\n",
       "      <td>15.550645</td>\n",
       "      <td>12.428972</td>\n",
       "      <td>9.879788</td>\n",
       "      <td>0.701959</td>\n",
       "      <td>0.455912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>14375.750000</td>\n",
       "      <td>731.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>28750.500000</td>\n",
       "      <td>1212.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>51250.250000</td>\n",
       "      <td>1898.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>80000.000000</td>\n",
       "      <td>4097.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID        Insects  Category_of_Toxicant     Does_count  \\\n",
       "count  115000.000000  115000.000000         115000.000000  115000.000000   \n",
       "mean    33152.673913    1398.193104              2.267870      25.855783   \n",
       "std     22567.036282     849.695508              0.464341      15.550645   \n",
       "min         1.000000     150.000000              1.000000       0.000000   \n",
       "25%     14375.750000     731.000000              2.000000      15.000000   \n",
       "50%     28750.500000    1212.000000              2.000000      20.000000   \n",
       "75%     51250.250000    1898.000000              3.000000      40.000000   \n",
       "max     80000.000000    4097.000000              3.000000      95.000000   \n",
       "\n",
       "       Number_of_Weeks_Used  Number_Weeks_does_not used         Season  \\\n",
       "count         103403.000000               115000.000000  115000.000000   \n",
       "mean              28.698316                    9.508243       1.898374   \n",
       "std               12.428972                    9.879788       0.701959   \n",
       "min                0.000000                    0.000000       1.000000   \n",
       "25%               20.000000                    0.000000       1.000000   \n",
       "50%               28.000000                    7.000000       2.000000   \n",
       "75%               37.000000                   16.000000       2.000000   \n",
       "max               67.000000                   50.000000       3.000000   \n",
       "\n",
       "        Crop_status  \n",
       "count  80000.000000  \n",
       "mean       0.192312  \n",
       "std        0.455912  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        2.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ad12c7b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                                0\n",
       "Insects                           0\n",
       "Crop                              0\n",
       "Soil                              0\n",
       "Category_of_Toxicant              0\n",
       "Does_count                        0\n",
       "Number_of_Weeks_Used          11597\n",
       "Number_Weeks_does_not used        0\n",
       "Season                            0\n",
       "Crop_status                   35000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "98b1250f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(115000, 10)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "45f39538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'Insects', 'Category_of_Toxicant', 'Does_count',\n",
       "       'Number_of_Weeks_Used', 'Number_Weeks_does_not used', 'Season',\n",
       "       'Crop_status'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "eab52e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data['Number_of_Weeks_Used'].fillna(Data['Number_of_Weeks_Used'].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "d4117171",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.Number_of_Weeks_Used .isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "db9d2687",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data.Crop_status.fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3e40f03f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.Number_of_Weeks_Used.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "a9a8cd04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                            0\n",
       "Insects                       0\n",
       "Category_of_Toxicant          0\n",
       "Does_count                    0\n",
       "Number_of_Weeks_Used          0\n",
       "Number_Weeks_does_not used    0\n",
       "Season                        0\n",
       "Crop_status                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1d2ea65e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 115000 entries, 0 to 114999\n",
      "Data columns (total 8 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   ID                          115000 non-null  float64\n",
      " 1   Insects                     115000 non-null  float64\n",
      " 2   Category_of_Toxicant        115000 non-null  float64\n",
      " 3   Does_count                  115000 non-null  float64\n",
      " 4   Number_of_Weeks_Used        115000 non-null  float64\n",
      " 5   Number_Weeks_does_not used  115000 non-null  float64\n",
      " 6   Season                      115000 non-null  float64\n",
      " 7   Crop_status                 115000 non-null  float64\n",
      "dtypes: float64(8)\n",
      "memory usage: 7.0 MB\n"
     ]
    }
   ],
   "source": [
    "Data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "1eadf07f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                            float64\n",
       "Insects                       float64\n",
       "Category_of_Toxicant          float64\n",
       "Does_count                    float64\n",
       "Number_of_Weeks_Used          float64\n",
       "Number_Weeks_does_not used    float64\n",
       "Season                        float64\n",
       "Crop_status                   float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5f3d5996",
   "metadata": {},
   "outputs": [],
   "source": [
    "Data.drop(['Crop','Soil'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "038d8705",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Insects</th>\n",
       "      <th>Category_of_Toxicant</th>\n",
       "      <th>Does_count</th>\n",
       "      <th>Number_of_Weeks_Used</th>\n",
       "      <th>Number_Weeks_does_not used</th>\n",
       "      <th>Season</th>\n",
       "      <th>Crop_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>209.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>257.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>342.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  Insects  Category_of_Toxicant  Does_count  Number_of_Weeks_Used  \\\n",
       "0  1.0    188.0                   1.0         0.0                   0.0   \n",
       "1  2.0    209.0                   1.0         0.0                   0.0   \n",
       "2  3.0    257.0                   1.0         0.0                   0.0   \n",
       "3  4.0    257.0                   1.0         0.0                   0.0   \n",
       "4  5.0    342.0                   1.0         0.0                   0.0   \n",
       "\n",
       "   Number_Weeks_does_not used  Season  Crop_status  \n",
       "0                         0.0     1.0          0.0  \n",
       "1                         0.0     2.0          1.0  \n",
       "2                         0.0     2.0          1.0  \n",
       "3                         0.0     2.0          1.0  \n",
       "4                         0.0     2.0          1.0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ef8f13ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                            0\n",
       "Insects                       0\n",
       "Category_of_Toxicant          0\n",
       "Does_count                    0\n",
       "Number_of_Weeks_Used          0\n",
       "Number_Weeks_does_not used    0\n",
       "Season                        0\n",
       "Crop_status                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dda576cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "258a0e05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(Data.corr(),annot=True,cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05af25e9",
   "metadata": {},
   "source": [
    "<b>Univariate Analysis<b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3ab3e32f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "sns.catplot(x='Crop_status', data=Data, palette=\"hls\",kind='count',hue='Crop_status')\n",
    "plt.xlabel(\"Crop_status\", fontsize=16)\n",
    "plt.ylabel(\"Count\", fontsize=16)\n",
    "plt.title(\"Crop_Type Grouped Count\", fontsize=20)\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "8aa663bd",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of [Index(['Number_Weeks_Used'], dtype='object')] are in the [columns]\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_25544/1143832123.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m12\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mg\u001b[0m\u001b[1;33m=\u001b[0m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFacetGrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mData\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Crop_status'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0msize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Number_Weeks_Used\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py\u001b[0m in \u001b[0;36mmap\u001b[1;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[0;32m    698\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    699\u001b[0m             \u001b[1;31m# Get the actual data we are going to plot with\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 700\u001b[1;33m             \u001b[0mplot_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdata_ijk\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    701\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dropna\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    702\u001b[0m                 \u001b[0mplot_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3462\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3463\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3464\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3465\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3466\u001b[0m         \u001b[1;31m# take() does not accept boolean indexers\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[1;34m(self, key, axis)\u001b[0m\n\u001b[0;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1313\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1314\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1315\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[1;34m(self, key, indexer, axis)\u001b[0m\n\u001b[0;32m   1372\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0muse_interval_msg\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1373\u001b[0m                     \u001b[0mkey\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1374\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1375\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munique\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"None of [Index(['Number_Weeks_Used'], dtype='object')] are in the [columns]\""
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 864x360 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,5))\n",
    "g= sns.FacetGrid(Data, col='Crop_status',size=5)\n",
    "g = g.map(sns.distplot, \"Number_Weeks_Used\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "8fd8045b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Crop = Data[\"Crop_status\"].value_counts()\n",
    "df = pd.DataFrame({'labels': Crop.index,\n",
    "                   'values': Crop.values\n",
    "                  })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "999fb7d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = df['labels']\n",
    "sizes = df['values']\n",
    "colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral','cyan','lightpink']\n",
    "patches, texts = plt.pie(sizes, colors=colors, shadow=True, startangle=90, pctdistance=1.1, labeldistance=1.2)\n",
    "plt.legend(patches, labels, loc=\"best\")\n",
    "plt.axis('equal')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d8b79487",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Crop_status', ylabel='Insects'>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Crop_status\" ,y=\"Insects\",hue=\"Season\",data=Data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2b4cb023",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.ensemble import AdaBoostRegressor\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.metrics import mean_squared_error \n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e198852c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = Data.Crop_status \n",
    "x = Data.drop(['Crop_status'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "33413a23",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler=MinMaxScaler()\n",
    "scaled_data=scaler.fit_transform(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "07c84592",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=pd.DataFrame(scaled_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dca0cf59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               0         1    2         3         4     5    6\n",
      "0       0.000000  0.009628  0.0  0.000000  0.000000  0.00  0.0\n",
      "1       0.000013  0.014948  0.0  0.000000  0.000000  0.00  0.5\n",
      "2       0.000025  0.027109  0.0  0.000000  0.000000  0.00  0.5\n",
      "3       0.000038  0.027109  0.0  0.000000  0.000000  0.00  0.5\n",
      "4       0.000050  0.048645  0.0  0.000000  0.000000  0.00  0.5\n",
      "...          ...       ...  ...       ...       ...   ...  ...\n",
      "114995  0.437443  0.133519  0.5  0.421053  0.402985  0.06  0.0\n",
      "114996  0.437455  0.147200  0.5  0.105263  0.119403  0.40  1.0\n",
      "114997  0.437468  0.147454  0.5  0.105263  0.149254  0.40  0.5\n",
      "114998  0.437480  0.147200  0.5  0.105263  0.462687  0.04  0.5\n",
      "114999  0.437493  0.147200  0.5  0.157895  0.119403  0.32  0.0\n",
      "\n",
      "[115000 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "df317d3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test,y_train,y_test= train_test_split(x,y,train_size = 0.8, test_size = 0.2,random_state =50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c59da74f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c21b9b0",
   "metadata": {},
   "source": [
    "<b>Random Forest</b>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c4fab32f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(n_estimators=10, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(n_estimators=10, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(n_estimators=10, random_state=0)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "regressor = RandomForestRegressor(n_estimators=10,random_state=0)\n",
    "regressor.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a384f87c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=regressor.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3b6d78b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.832836462836914"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e38483e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06722910259387771"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80338237",
   "metadata": {},
   "source": [
    " <b>LogisticRegression</b>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c46e6340",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score = 0.8841413043478261\n",
      "Test Score = 0.8827391304347826\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "model=LogisticRegression().fit(x_train,y_train)\n",
    "print(\"Train Score =\",model.score(x_train,y_train))\n",
    "print(\"Test Score =\",model.score(x_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a32c1257",
   "metadata": {},
   "source": [
    "<b>KNN</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b8c86b40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "classifierKNN = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\n",
    "classifierKNN.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "faa5e98e",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = classifierKNN.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "85a2becb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 1. 0. ... 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5947db6d",
   "metadata": {},
   "source": [
    "<b>SVM</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d0b752ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8832608695652174"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "clf=svm.SVC(kernel='linear') \n",
    "clf.fit(x_train,y_train)\n",
    "y_pre=clf.predict(x_test)\n",
    "clf.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d69a716b",
   "metadata": {},
   "source": [
    "<b> Gaussian NB </b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "49300cef",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "naive_bayes = GaussianNB()\n",
    "naive_bayes.fit(x_train,y_train)\n",
    "y_predicted = naive_bayes.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "44197feb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8696521739130435"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "metrics.accuracy_score(y_predicted,y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3224e397",
   "metadata": {},
   "source": [
    "<b> Decision Tree Classifier <b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0ce0bf02",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "32a3b1ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score= 0.8841413043478261\n",
      "Test Score= 0.8827391304347826\n"
     ]
    }
   ],
   "source": [
    "model1=DecisionTreeClassifier().fit(x_train,y_train)\n",
    "print(\"Train Score=\",model.score(x_train,y_train))\n",
    "print(\"Test Score=\",model.score(x_test,y_test))\n",
    "y_predicted=model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "8bb0056b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "1815b577",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy score is :  0.8827391304347826\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy score is : \",accuracy_score(y_test,y_predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "a20791d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "classification report \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.88      1.00      0.94     20315\n",
      "         1.0       0.37      0.01      0.02      2249\n",
      "         2.0       0.00      0.00      0.00       436\n",
      "\n",
      "    accuracy                           0.88     23000\n",
      "   macro avg       0.42      0.34      0.32     23000\n",
      "weighted avg       0.82      0.88      0.83     23000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "print(\"classification report \\n\",classification_report(y_test,y_predicted))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b1bc828a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnf = confusion_matrix(y_test,y_predicted)\n",
    "sns.heatmap(cnf, annot=True, cmap = \"Blues\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "48b374be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8853043478260869\n",
      "[[20302    13     0]\n",
      " [ 2189    60     0]\n",
      " [  424    12     0]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.89      1.00      0.94     20315\n",
      "         1.0       0.71      0.03      0.05      2249\n",
      "         2.0       0.00      0.00      0.00       436\n",
      "\n",
      "    accuracy                           0.89     23000\n",
      "   macro avg       0.53      0.34      0.33     23000\n",
      "weighted avg       0.85      0.89      0.83     23000\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "C:\\Users\\karthika\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_classification.py:1327: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "ad=AdaBoostClassifier(n_estimators=10,learning_rate=1)\n",
    "ad.fit(x_train,y_train)\n",
    "ad_pred=ad.predict(x_test)\n",
    "print(accuracy_score(y_test,ad_pred))\n",
    "print(confusion_matrix(y_test,ad_pred))\n",
    "print(classification_report(y_test,ad_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d59ec69c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
